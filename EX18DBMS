18 
		
		 NoSQL – CRUD


_____________________________Q1_____________________________  

Write a MongoDB query to create an INVOICE database and collections (CUSTOMER,
PRODUCT) and its corresponding documents


> use INVOICE
switched to db INVOICE
> db.createCollection("customer")
{ "ok" : 1 }
> db.createCollection("product")
{ "ok" : 1 }


** db.customer.insert({"id":"2","name":"aneeta","address":"ekm","pn_no":"9898","age":"25"})
WriteResult({ "nInserted" : 1 })
> db.customer.insert({"id":"1","name":"kavya","address":"tvm","pn_no":"8898","age":"25"})
WriteResult({ "nInserted" : 1 })
> db.customer.insert({"id":"3","name":"john","address":"calicut","pn_no":"9998","age":"60"})
WriteResult({ "nInserted" : 1 })
> db.customer.insert({"id":"4","name":"awan","address":"calicut","pn_no":"7798","age":"10"})
WriteResult({ "nInserted" : 1 })
> db.customer.insert({"id":"5","name":"reem","address":"calicut","pn_no":"7798","age":"10"})
WriteResult({ "nInserted" : 1 })
> 
> db.customer.insert({"id":"6","name":"reet","address":"kannur","pn_no":"7798","age":"10"})
WriteResult({ "nInserted" : 1 })


**

> db.product.insert({"pname":"mango","price":"40"})
WriteResult({ "nInserted" : 1 })
> db.product.insert({"pname":"mat","price":"50"})
WriteResult({ "nInserted" : 1 })
> db.product.insert({"pname":"dress","price":"100"})
WriteResult({ "nInserted" : 1 })
> db.product.insert({"pname":"pencil","price":"75"})
WriteResult({ "nInserted" : 1 })

**

> db.product.find().pretty();
{
	"_id" : ObjectId("62a30e47acdd30a16dfc859b"),
	"pname" : "mango",
	"price" : "40"
}
{
	"_id" : ObjectId("62a30e56acdd30a16dfc859c"),
	"pname" : "mat",
	"price" : "50"
}
{
	"_id" : ObjectId("62a30e67acdd30a16dfc859d"),
	"pname" : "dress",
	"price" : "100"
}
{
	"_id" : ObjectId("62a30e8cacdd30a16dfc859e"),
	"pname" : "pencil",
	"price" : "75"
}



_______________________________Q2__________________________________________ 

 Write a MongoDB query to find all documents from the collection CUSTOMER

> db.customer.find().pretty();
{
	"_id" : ObjectId("62a30d34acdd30a16dfc8596"),
	"id" : "2",
	"name" : "aneeta",
	"address" : "ekm",
	"pn_no" : "9898",
	"age" : "25"
}
{
	"_id" : ObjectId("62a30d5aacdd30a16dfc8597"),
	"id" : "1",
	"name" : "kavya",
	"address" : "tvm",
	"pn_no" : "8898",
	"age" : "25"
}
{
	"_id" : ObjectId("62a30d7eacdd30a16dfc8598"),
	"id" : "3",
	"name" : "john",
	"address" : "calicut",
	"pn_no" : "9998",
	"age" : "60"
}
{
	"_id" : ObjectId("62a30d97acdd30a16dfc8599"),
	"id" : "4",
	"name" : "awan",
	"address" : "calicut",
	"pn_no" : "7798",
	"age" : "10"
}
{
	"_id" : ObjectId("62a30de8acdd30a16dfc859a"),
	"id" : "5",
	"name" : "reem",
	"address" : "calicut",
	"pn_no" : "7798",
	"age" : "10"
}

{
	"_id" : ObjectId("62a31086acdd30a16dfc859f"),
	"id" : "6",
	"name" : "reet",
	"address" : "kannur",
	"pn_no" : "7798",
	"age" : "10"
}





_________________________________Q3_____________________________________________
    
 Write a MongoDB query to update the city in the collection CUSTOMER.


> db.customer.update({"address":"kannur"},{$set:{"address":"malappuram"}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.customer.find().pretty();
{
	"_id" : ObjectId("62a30d34acdd30a16dfc8596"),
	"id" : "2",
	"name" : "aneeta",
	"address" : "ekm",
	"pn_no" : "9898",
	"age" : "25"
}
{
	"_id" : ObjectId("62a30d5aacdd30a16dfc8597"),
	"id" : "1",
	"name" : "kavya",
	"address" : "tvm",
	"pn_no" : "8898",
	"age" : "25"
}
{
	"_id" : ObjectId("62a30d7eacdd30a16dfc8598"),
	"id" : "3",
	"name" : "john",
	"address" : "calicut",
	"pn_no" : "9998",
	"age" : "60"
}
{
	"_id" : ObjectId("62a30d97acdd30a16dfc8599"),
	"id" : "4",
	"name" : "awan",
	"address" : "calicut",
	"pn_no" : "7798",
	"age" : "10"
}
{
	"_id" : ObjectId("62a30de8acdd30a16dfc859a"),
	"id" : "5",
	"name" : "reem",
	"address" : "calicut",
	"pn_no" : "7798",
	"age" : "10"
}
{
	"_id" : ObjectId("62a31086acdd30a16dfc859f"),
	"id" : "6",
	"name" : "reet",
	"address" : "malappuram",
	"pn_no" : "7798",
	"age" : "10"
}
> 

______________________________Q4____________________________________  

 Write a MongoDB query to delete the first matched document whose city is “Calicut”.



> db.customer.deleteOne({"address":"calicut"})
{ "acknowledged" : true, "deletedCount" : 1 }
> db.customer.find().pretty();
{
	"_id" : ObjectId("62a30d34acdd30a16dfc8596"),
	"id" : "2",
	"name" : "aneeta",
	"address" : "ekm",
	"pn_no" : "9898",
	"age" : "25"
}
{
	"_id" : ObjectId("62a30d5aacdd30a16dfc8597"),
	"id" : "1",
	"name" : "kavya",
	"address" : "tvm",
	"pn_no" : "8898",
	"age" : "25"
}
{
	"_id" : ObjectId("62a30d97acdd30a16dfc8599"),
	"id" : "4",
	"name" : "awan",
	"address" : "calicut",
	"pn_no" : "7798",
	"age" : "10"
}
{
	"_id" : ObjectId("62a30de8acdd30a16dfc859a"),
	"id" : "5",
	"name" : "reem",
	"address" : "calicut",
	"pn_no" : "7798",
	"age" : "10"
}
{
	"_id" : ObjectId("62a31086acdd30a16dfc859f"),
	"id" : "6",
	"name" : "reet",
	"address" : "malappuram",
	"pn_no" : "7798",
	"age" : "10"
}
> 

